apiVersion: v1
kind: List
metadata: {}
items:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: object-detection-kafka-consumer
      app.kubernetes.io/component: object-detection-kafka-consumer
      app.kubernetes.io/instance: object-detection-kafka-consumer
      app.kubernetes.io/part-of: object-detection-kafka-consumer
    name: object-detection-kafka-consumer
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: object-detection-kafka-consumer
      app.kubernetes.io/component: object-detection-kafka-consumer
      app.kubernetes.io/instance: object-detection-kafka-consumer
      app.kubernetes.io/part-of: object-detection-kafka-consumer
    name: object-detection-kafka-consumer
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: object-detection-kafka-consumer:latest
    postCommit: {}
    resources: {}
    source:
      git:
        uri: https://github.com/rh-aiservices-bu/object-detection-kafka-consumer.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.8-ubi8
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"object-detection-kafka-consumer:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"object-detection-kafka-consumer\")].image"}]'
    labels:
      app: object-detection-kafka-consumer
      app.kubernetes.io/component: object-detection-kafka-consumer
      app.kubernetes.io/instance: object-detection-kafka-consumer
      app.kubernetes.io/part-of: object-detection-kafka-consumer
    name: object-detection-kafka-consumer
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/part-of: object-detection-kafka-consumer
        deployment: object-detection-kafka-consumer
    strategy: {}
    template:
      metadata:
        labels:
          app.kubernetes.io/part-of: object-detection-kafka-consumer
          deployment: object-detection-kafka-consumer
      spec:
        containers:
        - image: ' '
          imagePullPolicy: Always
          name: object-detection-kafka-consumer
          ports:
          - containerPort: 8080
            protocol: TCP
          envFrom:
            - configMapRef:
                name: object-detection
            - secretRef:
                name: object-detection
          resources: {}
#          resources:
#            requests:
#              cpu: 2000m
#              memory: 4000Mi
#            limits:
#              cpu: 2000m
#              memory: 6000Mi
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: object-detection-kafka-consumer
      app.kubernetes.io/component: object-detection-kafka-consumer
      app.kubernetes.io/instance: object-detection-kafka-consumer
      app.kubernetes.io/part-of: object-detection-kafka-consumer
    name: object-detection-kafka-consumer
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/part-of: object-detection-kafka-consumer
      deployment: object-detection-kafka-consumer
  status:
    loadBalancer: {}

